{"ast":null,"code":"var _createForOfIteratorHelper = require(\"/Users/apple/Documents/Testnet/sandbox_chat_application/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar he = require('he');\n\nvar _require = require('./helper'),\n    get = _require.get,\n    numberToLetterSequence = _require.numberToLetterSequence,\n    numberToRoman = _require.numberToRoman,\n    splitClassesAndIds = _require.splitClassesAndIds,\n    trimCharacter = _require.trimCharacter; // eslint-disable-next-line import/no-unassigned-import\n\n\nrequire('./typedefs');\n/**\n * Dummy formatter that discards the input and does nothing.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatSkip(elem, walk, builder, formatOptions) {\n  /* do nothing */\n}\n/**\n * Process an inline-level element.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatInline(elem, walk, builder, formatOptions) {\n  walk(elem.children, builder);\n}\n/**\n * Process a block-level container.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatBlock(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks\n  });\n}\n/**\n * Process a line-break.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatLineBreak(elem, walk, builder, formatOptions) {\n  builder.addLineBreak();\n}\n/**\n * Process a `wbk` tag (word break opportunity).\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatWbr(elem, walk, builder, formatOptions) {\n  builder.addWordBreakOpportunity();\n}\n/**\n * Process a horizontal line.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatHorizontalLine(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  builder.addInline('-'.repeat(formatOptions.length || builder.options.wordwrap || 40));\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process a paragraph.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatParagraph(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process a preformatted content.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatPre(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    isPre: true,\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process a heading.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatHeading(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n\n  if (formatOptions.uppercase !== false) {\n    builder.pushWordTransform(function (str) {\n      return str.toUpperCase();\n    });\n    walk(elem.children, builder);\n    builder.popWordTransform();\n  } else {\n    walk(elem.children, builder);\n  }\n\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process a blockquote.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatBlockquote(elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2,\n    reservedLineLength: 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2,\n    blockTransform: function blockTransform(str) {\n      return (formatOptions.trimEmptyLines !== false ? trimCharacter(str, '\\n') : str).split('\\n').map(function (line) {\n        return '> ' + line;\n      }).join('\\n');\n    }\n  });\n}\n/**\n * Process an image.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatImage(elem, walk, builder, formatOptions) {\n  var attribs = elem.attribs || {};\n  var alt = attribs.alt ? he.decode(attribs.alt, builder.options.decodeOptions) : '';\n  var src = !attribs.src ? '' : formatOptions.baseUrl && attribs.src.indexOf('/') === 0 ? formatOptions.baseUrl + attribs.src : attribs.src;\n  var text = !src ? alt : !alt ? '[' + src + ']' : alt + ' [' + src + ']';\n  builder.addInline(text);\n}\n/**\n * Process an anchor.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatAnchor(elem, walk, builder, formatOptions) {\n  function getHref() {\n    if (formatOptions.ignoreHref) {\n      return '';\n    }\n\n    if (!elem.attribs || !elem.attribs.href) {\n      return '';\n    }\n\n    var href = elem.attribs.href.replace(/^mailto:/, '');\n\n    if (formatOptions.noAnchorUrl && href[0] === '#') {\n      return '';\n    }\n\n    href = formatOptions.baseUrl && href[0] === '/' ? formatOptions.baseUrl + href : href;\n    return he.decode(href, builder.options.decodeOptions);\n  }\n\n  var href = getHref();\n\n  if (!href) {\n    walk(elem.children, builder);\n  } else {\n    var text = '';\n    builder.pushWordTransform(function (str) {\n      if (str) {\n        text += str;\n      }\n\n      return str;\n    });\n    walk(elem.children, builder);\n    builder.popWordTransform();\n    var hideSameLink = formatOptions.hideLinkHrefIfSameAsText && href === text;\n\n    if (!hideSameLink) {\n      builder.addInline(!text ? href : formatOptions.noLinkBrackets ? ' ' + href : ' [' + href + ']', {\n        noWordTransform: true\n      });\n    }\n  }\n}\n/**\n * @param { DomNode }           elem               List items with their prefixes.\n * @param { RecursiveCallback } walk               Recursive callback to process child nodes.\n * @param { BlockTextBuilder }  builder            Passed around to accumulate output text.\n * @param { FormatOptions }     formatOptions      Options specific to a formatter.\n * @param { () => string }      nextPrefixCallback Function that returns inreasing index each time it is called.\n */\n\n\nfunction formatList(elem, walk, builder, formatOptions, nextPrefixCallback) {\n  var isNestedList = get(elem, ['parent', 'name']) === 'li'; // With Roman numbers, index length is not as straightforward as with Arabic numbers or letters,\n  // so the dumb length comparison is the most robust way to get the correct value.\n\n  var maxPrefixLength = 0;\n  var listItems = (elem.children || [] // it might be more accuurate to check only for html spaces here, but no significant benefit\n  ).filter(function (child) {\n    return child.type !== 'text' || !/^\\s*$/.test(child.data);\n  }).map(function (child) {\n    if (child.name !== 'li') {\n      return {\n        node: child,\n        prefix: ''\n      };\n    }\n\n    var prefix = isNestedList ? nextPrefixCallback().trimStart() : nextPrefixCallback();\n\n    if (prefix.length > maxPrefixLength) {\n      maxPrefixLength = prefix.length;\n    }\n\n    return {\n      node: child,\n      prefix: prefix\n    };\n  });\n\n  if (!listItems.length) {\n    return;\n  }\n\n  var reservedLineLength = maxPrefixLength;\n  var spacing = '\\n' + ' '.repeat(reservedLineLength);\n  builder.openBlock({\n    leadingLineBreaks: isNestedList ? 1 : formatOptions.leadingLineBreaks || 2\n  });\n\n  var _iterator = _createForOfIteratorHelper(listItems),\n      _step;\n\n  try {\n    var _loop = function _loop() {\n      var _step$value = _step.value,\n          node = _step$value.node,\n          prefix = _step$value.prefix;\n      builder.openBlock({\n        leadingLineBreaks: 1,\n        reservedLineLength: reservedLineLength\n      });\n      walk([node], builder);\n      builder.closeBlock({\n        trailingLineBreaks: 1,\n        blockTransform: function blockTransform(str) {\n          return prefix + ' '.repeat(reservedLineLength - prefix.length) + str.replace(/\\n/g, spacing);\n        }\n      });\n    };\n\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      _loop();\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  builder.closeBlock({\n    trailingLineBreaks: isNestedList ? 1 : formatOptions.trailingLineBreaks || 2\n  });\n}\n/**\n * Process an unordered list.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatUnorderedList(elem, walk, builder, formatOptions) {\n  var prefix = formatOptions.itemPrefix || ' * ';\n  return formatList(elem, walk, builder, formatOptions, function () {\n    return prefix;\n  });\n}\n/**\n * Process an ordered list.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatOrderedList(elem, walk, builder, formatOptions) {\n  var nextIndex = Number(elem.attribs.start || '1');\n  var indexFunction = getOrderedListIndexFunction(elem.attribs.type);\n\n  var nextPrefixCallback = function nextPrefixCallback() {\n    return ' ' + indexFunction(nextIndex++) + '. ';\n  };\n\n  return formatList(elem, walk, builder, formatOptions, nextPrefixCallback);\n}\n/**\n * Return a function that can be used to generate index markers of a specified format.\n *\n * @param   { string } [olType='1'] Marker type.\n * @returns { (i: number) => string }\n */\n\n\nfunction getOrderedListIndexFunction() {\n  var olType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '1';\n\n  switch (olType) {\n    case 'a':\n      return function (i) {\n        return numberToLetterSequence(i, 'a');\n      };\n\n    case 'A':\n      return function (i) {\n        return numberToLetterSequence(i, 'A');\n      };\n\n    case 'i':\n      return function (i) {\n        return numberToRoman(i).toLowerCase();\n      };\n\n    case 'I':\n      return function (i) {\n        return numberToRoman(i);\n      };\n\n    case '1':\n    default:\n      return function (i) {\n        return i.toString();\n      };\n  }\n}\n\nfunction isDataTable(attr, tables) {\n  if (tables === true) {\n    return true;\n  }\n\n  if (!attr) {\n    return false;\n  }\n\n  var _splitClassesAndIds = splitClassesAndIds(tables),\n      classes = _splitClassesAndIds.classes,\n      ids = _splitClassesAndIds.ids;\n\n  var attrClasses = (attr['class'] || '').split(' ');\n  var attrIds = (attr['id'] || '').split(' ');\n  return attrClasses.some(function (x) {\n    return classes.includes(x);\n  }) || attrIds.some(function (x) {\n    return ids.includes(x);\n  });\n}\n/**\n * Process a table (either as a container or as a data table, depending on options).\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatTable(elem, walk, builder, formatOptions) {\n  return isDataTable(elem.attribs, builder.options.tables) ? formatDataTable(elem, walk, builder, formatOptions) : formatBlock(elem, walk, builder, formatOptions);\n}\n/**\n * Process a data table.\n *\n * @type { FormatCallback }\n */\n\n\nfunction formatDataTable(elem, walk, builder, formatOptions) {\n  builder.openTable();\n  elem.children.forEach(walkTable);\n  builder.closeTable({\n    colSpacing: formatOptions.colSpacing,\n    leadingLineBreaks: formatOptions.leadingLineBreaks,\n    rowSpacing: formatOptions.rowSpacing,\n    trailingLineBreaks: formatOptions.trailingLineBreaks\n  });\n\n  function formatCell(cellNode) {\n    var colspan = +get(cellNode, ['attribs', 'colspan']) || 1;\n    var rowspan = +get(cellNode, ['attribs', 'rowspan']) || 1;\n    builder.openTableCell({\n      maxColumnWidth: formatOptions.maxColumnWidth\n    });\n    walk(cellNode.children, builder);\n    builder.closeTableCell({\n      colspan: colspan,\n      rowspan: rowspan\n    });\n  }\n\n  function walkTable(elem) {\n    if (elem.type !== 'tag') {\n      return;\n    }\n\n    var formatHeaderCell = formatOptions.uppercaseHeaderCells ? function (cellNode) {\n      builder.pushWordTransform(function (str) {\n        return str.toUpperCase();\n      });\n      formatCell(cellNode);\n      builder.popWordTransform();\n    } : formatCell;\n\n    switch (elem.name) {\n      case 'thead':\n      case 'tbody':\n      case 'tfoot':\n      case 'center':\n        elem.children.forEach(walkTable);\n        return;\n\n      case 'tr':\n        {\n          builder.openTableRow();\n\n          var _iterator2 = _createForOfIteratorHelper(elem.children),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var childOfTr = _step2.value;\n\n              if (childOfTr.type !== 'tag') {\n                continue;\n              }\n\n              switch (childOfTr.name) {\n                case 'th':\n                  {\n                    formatHeaderCell(childOfTr);\n                    break;\n                  }\n\n                case 'td':\n                  {\n                    formatCell(childOfTr);\n                    break;\n                  }\n\n                default: // do nothing\n\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          builder.closeTableRow();\n          break;\n        }\n\n      default: // do nothing\n\n    }\n  }\n}\n\nmodule.exports = {\n  anchor: formatAnchor,\n  block: formatBlock,\n  blockquote: formatBlockquote,\n  dataTable: formatDataTable,\n  heading: formatHeading,\n  horizontalLine: formatHorizontalLine,\n  image: formatImage,\n  inline: formatInline,\n  lineBreak: formatLineBreak,\n  orderedList: formatOrderedList,\n  paragraph: formatParagraph,\n  pre: formatPre,\n  skip: formatSkip,\n  table: formatTable,\n  unorderedList: formatUnorderedList,\n  wbr: formatWbr\n};","map":{"version":3,"names":["he","require","get","numberToLetterSequence","numberToRoman","splitClassesAndIds","trimCharacter","formatSkip","elem","walk","builder","formatOptions","formatInline","children","formatBlock","openBlock","leadingLineBreaks","closeBlock","trailingLineBreaks","formatLineBreak","addLineBreak","formatWbr","addWordBreakOpportunity","formatHorizontalLine","addInline","repeat","length","options","wordwrap","formatParagraph","formatPre","isPre","formatHeading","uppercase","pushWordTransform","str","toUpperCase","popWordTransform","formatBlockquote","reservedLineLength","blockTransform","trimEmptyLines","split","map","line","join","formatImage","attribs","alt","decode","decodeOptions","src","baseUrl","indexOf","text","formatAnchor","getHref","ignoreHref","href","replace","noAnchorUrl","hideSameLink","hideLinkHrefIfSameAsText","noLinkBrackets","noWordTransform","formatList","nextPrefixCallback","isNestedList","maxPrefixLength","listItems","filter","child","type","test","data","name","node","prefix","trimStart","spacing","formatUnorderedList","itemPrefix","formatOrderedList","nextIndex","Number","start","indexFunction","getOrderedListIndexFunction","olType","i","toLowerCase","toString","isDataTable","attr","tables","classes","ids","attrClasses","attrIds","some","x","includes","formatTable","formatDataTable","openTable","forEach","walkTable","closeTable","colSpacing","rowSpacing","formatCell","cellNode","colspan","rowspan","openTableCell","maxColumnWidth","closeTableCell","formatHeaderCell","uppercaseHeaderCells","openTableRow","childOfTr","closeTableRow","module","exports","anchor","block","blockquote","dataTable","heading","horizontalLine","image","inline","lineBreak","orderedList","paragraph","pre","skip","table","unorderedList","wbr"],"sources":["/Users/apple/Documents/Testnet/sandbox_chat_application/node_modules/html-to-text/lib/formatter.js"],"sourcesContent":["const he = require('he');\n\nconst { get, numberToLetterSequence, numberToRoman, splitClassesAndIds, trimCharacter } = require('./helper');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\n/**\n * Dummy formatter that discards the input and does nothing.\n *\n * @type { FormatCallback }\n */\nfunction formatSkip (elem, walk, builder, formatOptions) {\n  /* do nothing */\n}\n\n/**\n * Process an inline-level element.\n *\n * @type { FormatCallback }\n */\nfunction formatInline (elem, walk, builder, formatOptions) {\n  walk(elem.children, builder);\n}\n\n/**\n * Process a block-level container.\n *\n * @type { FormatCallback }\n */\nfunction formatBlock (elem, walk, builder, formatOptions) {\n  builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks });\n  walk(elem.children, builder);\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks });\n}\n\n/**\n * Process a line-break.\n *\n * @type { FormatCallback }\n */\nfunction formatLineBreak (elem, walk, builder, formatOptions) {\n  builder.addLineBreak();\n}\n\n/**\n * Process a `wbk` tag (word break opportunity).\n *\n * @type { FormatCallback }\n */\nfunction formatWbr (elem, walk, builder, formatOptions) {\n  builder.addWordBreakOpportunity();\n}\n\n/**\n * Process a horizontal line.\n *\n * @type { FormatCallback }\n */\nfunction formatHorizontalLine (elem, walk, builder, formatOptions) {\n  builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks || 2 });\n  builder.addInline('-'.repeat(formatOptions.length || builder.options.wordwrap || 40));\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });\n}\n\n/**\n * Process a paragraph.\n *\n * @type { FormatCallback }\n */\nfunction formatParagraph (elem, walk, builder, formatOptions) {\n  builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks || 2 });\n  walk(elem.children, builder);\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });\n}\n\n/**\n * Process a preformatted content.\n *\n * @type { FormatCallback }\n */\nfunction formatPre (elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    isPre: true,\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });\n}\n\n/**\n * Process a heading.\n *\n * @type { FormatCallback }\n */\nfunction formatHeading (elem, walk, builder, formatOptions) {\n  builder.openBlock({ leadingLineBreaks: formatOptions.leadingLineBreaks || 2 });\n  if (formatOptions.uppercase !== false) {\n    builder.pushWordTransform(str => str.toUpperCase());\n    walk(elem.children, builder);\n    builder.popWordTransform();\n  } else {\n    walk(elem.children, builder);\n  }\n  builder.closeBlock({ trailingLineBreaks: formatOptions.trailingLineBreaks || 2 });\n}\n\n/**\n * Process a blockquote.\n *\n * @type { FormatCallback }\n */\nfunction formatBlockquote (elem, walk, builder, formatOptions) {\n  builder.openBlock({\n    leadingLineBreaks: formatOptions.leadingLineBreaks || 2,\n    reservedLineLength: 2\n  });\n  walk(elem.children, builder);\n  builder.closeBlock({\n    trailingLineBreaks: formatOptions.trailingLineBreaks || 2,\n    blockTransform: str => ((formatOptions.trimEmptyLines !== false) ? trimCharacter(str, '\\n') : str)\n      .split('\\n')\n      .map(line => '> ' + line)\n      .join('\\n')\n  });\n}\n\n/**\n * Process an image.\n *\n * @type { FormatCallback }\n */\nfunction formatImage (elem, walk, builder, formatOptions) {\n  const attribs = elem.attribs || {};\n  const alt = (attribs.alt)\n    ? he.decode(attribs.alt, builder.options.decodeOptions)\n    : '';\n  const src = (!attribs.src)\n    ? ''\n    : (formatOptions.baseUrl && attribs.src.indexOf('/') === 0)\n      ? formatOptions.baseUrl + attribs.src\n      : attribs.src;\n  const text = (!src)\n    ? alt\n    : (!alt)\n      ? '[' + src + ']'\n      : alt + ' [' + src + ']';\n\n  builder.addInline(text);\n}\n\n/**\n * Process an anchor.\n *\n * @type { FormatCallback }\n */\nfunction formatAnchor (elem, walk, builder, formatOptions) {\n  function getHref () {\n    if (formatOptions.ignoreHref) { return ''; }\n    if (!elem.attribs || !elem.attribs.href) { return ''; }\n    let href = elem.attribs.href.replace(/^mailto:/, '');\n    if (formatOptions.noAnchorUrl && href[0] === '#') { return ''; }\n    href = (formatOptions.baseUrl && href[0] === '/')\n      ? formatOptions.baseUrl + href\n      : href;\n    return he.decode(href, builder.options.decodeOptions);\n  }\n  const href = getHref();\n  if (!href) {\n    walk(elem.children, builder);\n  } else {\n    let text = '';\n    builder.pushWordTransform(\n      str => {\n        if (str) { text += str; }\n        return str;\n      }\n    );\n    walk(elem.children, builder);\n    builder.popWordTransform();\n\n    const hideSameLink = formatOptions.hideLinkHrefIfSameAsText && href === text;\n    if (!hideSameLink) {\n      builder.addInline(\n        (!text)\n          ? href\n          : (formatOptions.noLinkBrackets)\n            ? ' ' + href\n            : ' [' + href + ']',\n        { noWordTransform: true }\n      );\n    }\n  }\n}\n\n/**\n * @param { DomNode }           elem               List items with their prefixes.\n * @param { RecursiveCallback } walk               Recursive callback to process child nodes.\n * @param { BlockTextBuilder }  builder            Passed around to accumulate output text.\n * @param { FormatOptions }     formatOptions      Options specific to a formatter.\n * @param { () => string }      nextPrefixCallback Function that returns inreasing index each time it is called.\n */\nfunction formatList (elem, walk, builder, formatOptions, nextPrefixCallback) {\n  const isNestedList = get(elem, ['parent', 'name']) === 'li';\n\n  // With Roman numbers, index length is not as straightforward as with Arabic numbers or letters,\n  // so the dumb length comparison is the most robust way to get the correct value.\n  let maxPrefixLength = 0;\n  const listItems = (elem.children || [])\n    // it might be more accuurate to check only for html spaces here, but no significant benefit\n    .filter(child => child.type !== 'text' || !/^\\s*$/.test(child.data))\n    .map(function (child) {\n      if (child.name !== 'li') {\n        return { node: child, prefix: '' };\n      }\n      const prefix = (isNestedList)\n        ? nextPrefixCallback().trimStart()\n        : nextPrefixCallback();\n      if (prefix.length > maxPrefixLength) { maxPrefixLength = prefix.length; }\n      return { node: child, prefix: prefix };\n    });\n  if (!listItems.length) { return; }\n\n  const reservedLineLength = maxPrefixLength;\n  const spacing = '\\n' + ' '.repeat(reservedLineLength);\n  builder.openBlock({ leadingLineBreaks: isNestedList ? 1 : (formatOptions.leadingLineBreaks || 2) });\n  for (const { node, prefix } of listItems) {\n    builder.openBlock({\n      leadingLineBreaks: 1,\n      reservedLineLength: reservedLineLength\n    });\n    walk([node], builder);\n    builder.closeBlock({\n      trailingLineBreaks: 1,\n      blockTransform: str => prefix + ' '.repeat(reservedLineLength - prefix.length) + str.replace(/\\n/g, spacing)\n    });\n  }\n  builder.closeBlock({ trailingLineBreaks: isNestedList ? 1 : (formatOptions.trailingLineBreaks || 2) });\n}\n\n/**\n * Process an unordered list.\n *\n * @type { FormatCallback }\n */\nfunction formatUnorderedList (elem, walk, builder, formatOptions) {\n  const prefix = formatOptions.itemPrefix || ' * ';\n  return formatList(elem, walk, builder, formatOptions, () => prefix);\n}\n\n/**\n * Process an ordered list.\n *\n * @type { FormatCallback }\n */\nfunction formatOrderedList (elem, walk, builder, formatOptions) {\n  let nextIndex = Number(elem.attribs.start || '1');\n  const indexFunction = getOrderedListIndexFunction(elem.attribs.type);\n  const nextPrefixCallback = () => ' ' + indexFunction(nextIndex++) + '. ';\n  return formatList(elem, walk, builder, formatOptions, nextPrefixCallback);\n}\n\n/**\n * Return a function that can be used to generate index markers of a specified format.\n *\n * @param   { string } [olType='1'] Marker type.\n * @returns { (i: number) => string }\n */\nfunction getOrderedListIndexFunction (olType = '1') {\n  switch (olType) {\n    case 'a': return (i) => numberToLetterSequence(i, 'a');\n    case 'A': return (i) => numberToLetterSequence(i, 'A');\n    case 'i': return (i) => numberToRoman(i).toLowerCase();\n    case 'I': return (i) => numberToRoman(i);\n    case '1':\n    default: return (i) => (i).toString();\n  }\n}\n\nfunction isDataTable (attr, tables) {\n  if (tables === true) { return true; }\n  if (!attr) { return false; }\n\n  const { classes, ids } = splitClassesAndIds(tables);\n  const attrClasses = (attr['class'] || '').split(' ');\n  const attrIds = (attr['id'] || '').split(' ');\n\n  return attrClasses.some(x => classes.includes(x)) || attrIds.some(x => ids.includes(x));\n}\n\n/**\n * Process a table (either as a container or as a data table, depending on options).\n *\n * @type { FormatCallback }\n */\nfunction formatTable (elem, walk, builder, formatOptions) {\n  return isDataTable(elem.attribs, builder.options.tables)\n    ? formatDataTable(elem, walk, builder, formatOptions)\n    : formatBlock(elem, walk, builder, formatOptions);\n}\n\n/**\n * Process a data table.\n *\n * @type { FormatCallback }\n */\nfunction formatDataTable (elem, walk, builder, formatOptions) {\n  builder.openTable();\n  elem.children.forEach(walkTable);\n  builder.closeTable({\n    colSpacing: formatOptions.colSpacing,\n    leadingLineBreaks: formatOptions.leadingLineBreaks,\n    rowSpacing: formatOptions.rowSpacing,\n    trailingLineBreaks: formatOptions.trailingLineBreaks\n  });\n\n  function formatCell (cellNode) {\n    const colspan = +get(cellNode, ['attribs', 'colspan']) || 1;\n    const rowspan = +get(cellNode, ['attribs', 'rowspan']) || 1;\n    builder.openTableCell({ maxColumnWidth: formatOptions.maxColumnWidth });\n    walk(cellNode.children, builder);\n    builder.closeTableCell({ colspan: colspan, rowspan: rowspan });\n  }\n\n  function walkTable (elem) {\n    if (elem.type !== 'tag') { return; }\n\n    const formatHeaderCell = (formatOptions.uppercaseHeaderCells)\n      ? (cellNode) => {\n        builder.pushWordTransform(str => str.toUpperCase());\n        formatCell(cellNode);\n        builder.popWordTransform();\n      }\n      : formatCell;\n\n    switch (elem.name) {\n      case 'thead':\n      case 'tbody':\n      case 'tfoot':\n      case 'center':\n        elem.children.forEach(walkTable);\n        return;\n\n      case 'tr': {\n        builder.openTableRow();\n        for (const childOfTr of elem.children) {\n          if (childOfTr.type !== 'tag') { continue; }\n          switch (childOfTr.name) {\n            case 'th': {\n              formatHeaderCell(childOfTr);\n              break;\n            }\n            case 'td': {\n              formatCell(childOfTr);\n              break;\n            }\n            default:\n              // do nothing\n          }\n        }\n        builder.closeTableRow();\n        break;\n      }\n\n      default:\n        // do nothing\n    }\n  }\n}\n\nmodule.exports = {\n  anchor: formatAnchor,\n  block: formatBlock,\n  blockquote: formatBlockquote,\n  dataTable: formatDataTable,\n  heading: formatHeading,\n  horizontalLine: formatHorizontalLine,\n  image: formatImage,\n  inline: formatInline,\n  lineBreak: formatLineBreak,\n  orderedList: formatOrderedList,\n  paragraph: formatParagraph,\n  pre: formatPre,\n  skip: formatSkip,\n  table: formatTable,\n  unorderedList: formatUnorderedList,\n  wbr: formatWbr\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}