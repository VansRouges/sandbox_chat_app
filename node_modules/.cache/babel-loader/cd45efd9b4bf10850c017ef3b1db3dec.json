{"ast":null,"code":"var _toConsumableArray = require(\"/Users/apple/Documents/Testnet/sandbox_chat_application/node_modules/@babel/runtime/helpers/toConsumableArray.js\").default;\n\nvar _createForOfIteratorHelper = require(\"/Users/apple/Documents/Testnet/sandbox_chat_application/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\n\nvar _toArray = require(\"/Users/apple/Documents/Testnet/sandbox_chat_application/node_modules/@babel/runtime/helpers/toArray.js\").default;\n\nvar _classCallCheck = require(\"/Users/apple/Documents/Testnet/sandbox_chat_application/node_modules/@babel/runtime/helpers/classCallCheck.js\").default;\n\nvar _createClass = require(\"/Users/apple/Documents/Testnet/sandbox_chat_application/node_modules/@babel/runtime/helpers/createClass.js\").default;\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n/**\n * Helps to build text from words.\n */\n\n\nvar InlineTextBuilder = /*#__PURE__*/function () {\n  \"use strict\";\n\n  /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */\n  function InlineTextBuilder(options) {\n    var maxLineLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n\n    _classCallCheck(this, InlineTextBuilder);\n\n    /** @type { string[][] } */\n    this.lines = [];\n    /** @type { string[] }   */\n\n    this.nextLineWords = [];\n    this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n    this.nextLineAvailableChars = this.maxLineLength;\n    this.wrapCharacters = options.longWordSplit.wrapCharacters || [];\n    this.forceWrapOnLimit = options.longWordSplit.forceWrapOnLimit || false;\n    this.stashedSpace = false;\n    this.wordBreakOpportunity = false;\n  }\n  /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   */\n\n\n  _createClass(InlineTextBuilder, [{\n    key: \"pushWord\",\n    value: function pushWord(word) {\n      if (this.nextLineAvailableChars <= 0) {\n        this.startNewLine();\n      }\n\n      var isLineStart = this.nextLineWords.length === 0;\n      var cost = word.length + (isLineStart ? 0 : 1);\n\n      if (cost <= this.nextLineAvailableChars) {\n        // Fits into available budget\n        this.nextLineWords.push(word);\n        this.nextLineAvailableChars -= cost;\n      } else {\n        // Does not fit - try to split the word\n        // The word is moved to a new line - prefer to wrap between words.\n        var _this$splitLongWord = this.splitLongWord(word),\n            _this$splitLongWord2 = _toArray(_this$splitLongWord),\n            first = _this$splitLongWord2[0],\n            rest = _this$splitLongWord2.slice(1);\n\n        if (!isLineStart) {\n          this.startNewLine();\n        }\n\n        this.nextLineWords.push(first);\n        this.nextLineAvailableChars -= first.length;\n\n        var _iterator = _createForOfIteratorHelper(rest),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var part = _step.value;\n            this.startNewLine();\n            this.nextLineWords.push(part);\n            this.nextLineAvailableChars -= part.length;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n    /**\n     * Pop a word from the currently built line.\n     * This doesn't affect completed lines.\n     *\n     * @returns { string }\n     */\n\n  }, {\n    key: \"popWord\",\n    value: function popWord() {\n      var lastWord = this.nextLineWords.pop();\n\n      if (lastWord !== undefined) {\n        var isLineStart = this.nextLineWords.length === 0;\n        var cost = lastWord.length + (isLineStart ? 0 : 1);\n        this.nextLineAvailableChars += cost;\n      }\n\n      return lastWord;\n    }\n    /**\n     * Concat a word to the last word already in the builder.\n     * Adds a new word in case there are no words yet in the last line.\n     *\n     * @param { string } word A word to be concatenated.\n     */\n\n  }, {\n    key: \"concatWord\",\n    value: function concatWord(word) {\n      if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n        this.pushWord(word);\n        this.wordBreakOpportunity = false;\n      } else {\n        var lastWord = this.popWord();\n        this.pushWord(lastWord ? lastWord.concat(word) : word);\n      }\n    }\n    /**\n     * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n     *\n     * @param { number } n Number of line breaks that will be added to the resulting string.\n     */\n\n  }, {\n    key: \"startNewLine\",\n    value: function startNewLine() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      this.lines.push(this.nextLineWords);\n\n      if (n > 1) {\n        var _this$lines;\n\n        (_this$lines = this.lines).push.apply(_this$lines, _toConsumableArray(Array.from({\n          length: n - 1\n        }, function () {\n          return [];\n        })));\n      }\n\n      this.nextLineWords = [];\n      this.nextLineAvailableChars = this.maxLineLength;\n    }\n    /**\n     * No words in this builder.\n     *\n     * @returns { boolean }\n     */\n\n  }, {\n    key: \"isEmpty\",\n    value: function isEmpty() {\n      return this.lines.length === 0 && this.nextLineWords.length === 0;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.lines.length = 0;\n      this.nextLineWords.length = 0;\n      this.nextLineAvailableChars = this.maxLineLength;\n    }\n    /**\n     * Join all lines of words inside the InlineTextBuilder into a complete string.\n     *\n     * @returns { string }\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return [].concat(_toConsumableArray(this.lines), [this.nextLineWords]).map(function (words) {\n        return words.join(' ');\n      }).join('\\n');\n    }\n    /**\n     * Split a long word up to fit within the word wrap limit.\n     * Use either a character to split looking back from the word wrap limit,\n     * or truncate to the word wrap limit.\n     *\n     * @param   { string }   word Input word.\n     * @returns { string[] }      Parts of the word.\n     */\n\n  }, {\n    key: \"splitLongWord\",\n    value: function splitLongWord(word) {\n      var parts = [];\n      var idx = 0;\n\n      while (word.length > this.maxLineLength) {\n        var firstLine = word.substring(0, this.maxLineLength);\n        var remainingChars = word.substring(this.maxLineLength);\n        var splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n\n        if (splitIndex > -1) {\n          // Found a character to split on\n          word = firstLine.substring(splitIndex + 1) + remainingChars;\n          parts.push(firstLine.substring(0, splitIndex + 1));\n        } else {\n          // Not found a character to split on\n          idx++;\n\n          if (idx < this.wrapCharacters.length) {\n            // There is next character to try\n            word = firstLine + remainingChars;\n          } else {\n            // No more characters to try\n            if (this.forceWrapOnLimit) {\n              parts.push(firstLine);\n              word = remainingChars;\n\n              if (word.length > this.maxLineLength) {\n                continue;\n              }\n            } else {\n              word = firstLine + remainingChars;\n            }\n\n            break;\n          }\n        }\n      }\n\n      parts.push(word); // Add remaining part to array\n\n      return parts;\n    }\n  }]);\n\n  return InlineTextBuilder;\n}();\n\nmodule.exports = {\n  InlineTextBuilder: InlineTextBuilder\n};","map":{"version":3,"names":["require","InlineTextBuilder","options","maxLineLength","undefined","lines","nextLineWords","wordwrap","Number","MAX_VALUE","nextLineAvailableChars","wrapCharacters","longWordSplit","forceWrapOnLimit","stashedSpace","wordBreakOpportunity","word","startNewLine","isLineStart","length","cost","push","splitLongWord","first","rest","part","lastWord","pop","pushWord","popWord","concat","n","Array","from","map","words","join","parts","idx","firstLine","substring","remainingChars","splitIndex","lastIndexOf","module","exports"],"sources":["/Users/apple/Documents/Testnet/sandbox_chat_application/node_modules/html-to-text/lib/inline-text-builder.js"],"sourcesContent":["// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n/**\n * Helps to build text from words.\n */\nclass InlineTextBuilder {\n  /**\n   * Creates an instance of InlineTextBuilder.\n   *\n   * If `maxLineLength` is not provided then it is either `options.wordwrap` or unlimited.\n   *\n   * @param { Options } options           HtmlToText options.\n   * @param { number }  [ maxLineLength ] This builder will try to wrap text to fit this line length.\n   */\n  constructor (options, maxLineLength = undefined) {\n    /** @type { string[][] } */\n    this.lines = [];\n    /** @type { string[] }   */\n    this.nextLineWords = [];\n    this.maxLineLength = maxLineLength || options.wordwrap || Number.MAX_VALUE;\n    this.nextLineAvailableChars = this.maxLineLength;\n    this.wrapCharacters = options.longWordSplit.wrapCharacters || [];\n    this.forceWrapOnLimit = options.longWordSplit.forceWrapOnLimit || false;\n\n    this.stashedSpace = false;\n    this.wordBreakOpportunity = false;\n  }\n\n  /**\n   * Add a new word.\n   *\n   * @param { string } word A word to add.\n   */\n  pushWord (word) {\n    if (this.nextLineAvailableChars <= 0) {\n      this.startNewLine();\n    }\n    const isLineStart = this.nextLineWords.length === 0;\n    const cost = word.length + (isLineStart ? 0 : 1);\n    if (cost <= this.nextLineAvailableChars) { // Fits into available budget\n\n      this.nextLineWords.push(word);\n      this.nextLineAvailableChars -= cost;\n\n    } else { // Does not fit - try to split the word\n\n      // The word is moved to a new line - prefer to wrap between words.\n      const [first, ...rest] = this.splitLongWord(word);\n      if (!isLineStart) { this.startNewLine(); }\n      this.nextLineWords.push(first);\n      this.nextLineAvailableChars -= first.length;\n      for (const part of rest) {\n        this.startNewLine();\n        this.nextLineWords.push(part);\n        this.nextLineAvailableChars -= part.length;\n      }\n\n    }\n  }\n\n  /**\n   * Pop a word from the currently built line.\n   * This doesn't affect completed lines.\n   *\n   * @returns { string }\n   */\n  popWord () {\n    const lastWord = this.nextLineWords.pop();\n    if (lastWord !== undefined) {\n      const isLineStart = this.nextLineWords.length === 0;\n      const cost = lastWord.length + (isLineStart ? 0 : 1);\n      this.nextLineAvailableChars += cost;\n    }\n    return lastWord;\n  }\n\n  /**\n   * Concat a word to the last word already in the builder.\n   * Adds a new word in case there are no words yet in the last line.\n   *\n   * @param { string } word A word to be concatenated.\n   */\n  concatWord (word) {\n    if (this.wordBreakOpportunity && word.length > this.nextLineAvailableChars) {\n      this.pushWord(word);\n      this.wordBreakOpportunity = false;\n    } else {\n      const lastWord = this.popWord();\n      this.pushWord((lastWord) ? lastWord.concat(word) : word);\n    }\n  }\n\n  /**\n   * Add current line (and more empty lines if provided argument > 1) to the list of complete lines and start a new one.\n   *\n   * @param { number } n Number of line breaks that will be added to the resulting string.\n   */\n  startNewLine (n = 1) {\n    this.lines.push(this.nextLineWords);\n    if (n > 1) {\n      this.lines.push(...Array.from({ length: n - 1 }, () => []));\n    }\n    this.nextLineWords = [];\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n\n  /**\n   * No words in this builder.\n   *\n   * @returns { boolean }\n   */\n  isEmpty () {\n    return this.lines.length === 0\n        && this.nextLineWords.length === 0;\n  }\n\n  clear () {\n    this.lines.length = 0;\n    this.nextLineWords.length = 0;\n    this.nextLineAvailableChars = this.maxLineLength;\n  }\n\n  /**\n   * Join all lines of words inside the InlineTextBuilder into a complete string.\n   *\n   * @returns { string }\n   */\n  toString () {\n    return [...this.lines, this.nextLineWords]\n      .map(words => words.join(' '))\n      .join('\\n');\n  }\n\n  /**\n   * Split a long word up to fit within the word wrap limit.\n   * Use either a character to split looking back from the word wrap limit,\n   * or truncate to the word wrap limit.\n   *\n   * @param   { string }   word Input word.\n   * @returns { string[] }      Parts of the word.\n   */\n  splitLongWord (word) {\n    const parts = [];\n    let idx = 0;\n    while (word.length > this.maxLineLength) {\n\n      const firstLine = word.substring(0, this.maxLineLength);\n      const remainingChars = word.substring(this.maxLineLength);\n\n      const splitIndex = firstLine.lastIndexOf(this.wrapCharacters[idx]);\n\n      if (splitIndex > -1) { // Found a character to split on\n\n        word = firstLine.substring(splitIndex + 1) + remainingChars;\n        parts.push(firstLine.substring(0, splitIndex + 1));\n\n      } else { // Not found a character to split on\n\n        idx++;\n        if (idx < this.wrapCharacters.length) { // There is next character to try\n\n          word = firstLine + remainingChars;\n\n        } else { // No more characters to try\n\n          if (this.forceWrapOnLimit) {\n            parts.push(firstLine);\n            word = remainingChars;\n            if (word.length > this.maxLineLength) {\n              continue;\n            }\n          } else {\n            word = firstLine + remainingChars;\n          }\n          break;\n\n        }\n\n      }\n\n    }\n    parts.push(word); // Add remaining part to array\n    return parts;\n  }\n}\n\nmodule.exports = { InlineTextBuilder: InlineTextBuilder };\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}